# Define the packages
#using JuMP # used for mathematical programming
#using Gadfly # used for plotting
#using Gurobi

using JuMP, KNITRO, AmplNLWriter



priceProjection = [18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 2047.71, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 9.88235, 9.88235, 9.88235, 18.5238, 9.88235, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 18.5238, 18.5238, 18.5238, 18.5238, 47.3333, 47.3333, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 9.88235, 9.88235, 9.88235, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 18.5238, 18.5238, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 18.5238, 17.1436, 9.88235, 9.88235, 9.88235, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 9.88235, 9.88235, 9.88235, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 41.7275, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 2047.71, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 9.88235, 9.88235, 9.88235, 18.5238, 9.88235, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 18.5238, 18.5238, 18.5238, 18.5238, 47.3333, 47.3333, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 9.88235, 9.88235, 9.88235, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 18.5238, 18.5238, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 18.5238, 17.1436, 9.88235, 9.88235, 9.88235, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 9.88235, 9.88235, 9.88235, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 41.7275, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 2047.71, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 9.88235, 9.88235, 9.88235, 18.5238, 9.88235, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 18.5238, 18.5238, 18.5238, 18.5238, 47.3333, 47.3333, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 9.88235, 9.88235, 9.88235, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 18.5238, 18.5238, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 18.5238, 17.1436, 9.88235, 9.88235, 9.88235, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 9.88235, 9.88235, 9.88235, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 41.7275, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 2047.71, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 9.88235, 9.88235, 9.88235, 18.5238, 9.88235, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 18.5238, 18.5238, 18.5238, 18.5238, 47.3333, 47.3333, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 9.88235, 9.88235, 9.88235, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 47.3333, 47.3333, 47.3333, 47.3333, 47.3333, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 18.5238, 18.5238, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 18.5238, 17.1436, 9.88235, 9.88235, 9.88235, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 9.88235, 9.88235, 9.88235, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 41.7275, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 9.88235, 9.88235, 9.88235, 9.88235, 9.88235, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238, 18.5238]
function PriceMarkup(priceProjection::Array{Float64,1})
    newPriceProjection = Array{Float64,1}(undef,0)
    markupPercent = [1.2, 1.175,1.12, 1.055,1.05, 1.13,1.17,1.168,1.172, 1.175,1.185,1.18,1.19,1.175,1.165,1.145,1.15,1.175,1.205,1.20,1.21,1.18,1.2,1.2]

    for hour in 1:length(priceProjection)
        thisDayHour = 1.2
        if hour % 24 == 0
            thisDayHour = 24
        else
            thisDayHour = hour % 24
        end
        push!(newPriceProjection,priceProjection[hour] * markupPercent[Int(thisDayHour)])
    end
    return newPriceProjection
end

demand = max.(repeat(vec(systemLoad.representativeLoad'),4) .- 12670,0)

FindBestPortfolio = function(demand::Array{Float64,1}, priceProjection::Array{Float64,1}, technologyPool::Array{Technology,1}, systemSettings::SystemSettings)
    variable_cost = [technology.economicProperties.VOMCost + technology.economicProperties.fuelCost for technology in technologyPool]
    fixed_cost = [(technology.economicProperties.FOMCost + technology.economicProperties.yearlyInstallment)/technology.designProperties.unitCapacity for technology in technologyPool]
    representative_day = systemSettings.simulationSettings.year2day
    representative_hour = systemSettings.simulationSettings.day2hour
    VoLL = priceCap
    weight_year = systemSettings.milestoneYear
    representativeDayWeightFactors = systemSettings.simulationSettings.representativeData[:Weights][:,2]
    dailyWeight = repeat(representativeDayWeightFactors,4)

    start_hour = 1
    stop_hour = 4 * representative_day * representative_hour
    #gep=JuMP.direct_model(Gurobi.Optimizer(Method=1, OutputFlag = 0,Presolve=0))
    #gep=JuMP.direct_model(KNITRO.Optimizer())
    gep=JuMP.Model(with_optimizer(KNITRO.Optimizer,mip_integral_gap_abs = 1e2))
    #gep = Model(with_optimizer(AmplNLWriter.Optimizer, KNITRO.amplexe, ["outlev=3"]))
    #gep = Model(solver=KnitroSolver())

    @variable(gep,g_j_t[1:3,1:stop_hour]) #generation
    @variable(gep,y_j_t[1:3]) #Investment
    @variable(gep,d_j_t[1:3,1:stop_hour], binary=true)

    obj = 0
    for hour in start_hour:stop_hour
        thisWeightDay = dailyWeight[Int(ceil(hour/representative_hour))]
        for j in 1:length(technologyPool)
            obj += fixed_cost[j]/(sum(representativeDayWeightFactors)*24) * y_j_t[j]* thisWeightDay * weight_year

            obj += variable_cost[j] * g_j_t[j,hour] * thisWeightDay * weight_year
            #obj += -priceProjection[hour] * demand[hour]  * thisWeightDay * weight_year
        end
        obj += -priceProjection[hour] * sum(g_j_t[:,hour]) * thisWeightDay * weight_year
    end
    @objective(gep,Min,obj)

    for j in 1:length(variable_cost)
        @constraint(gep, y_j_t[j] >= 0)
    end

    for hour in start_hour:stop_hour
        #this_demand_supply = @constraint(gep, sum(g_j_t[:,hour]) + LL_t[hour] + import_t[hour] == demand[hour])
        #this_demand_supply = @constraint(gep, sum(g_j_t[:,hour]) + LL_t[hour]   == demand[hour])
        this_demand_supply = @constraint(gep, sum(g_j_t[:,hour]) == demand[hour])
        #push!(demand_supply,this_demand_supply)

        for j in 1:length(variable_cost)
            @NLconstraint(gep, g_j_t[j,hour] <= y_j_t[j] * d_j_t[j,hour] )
            @constraint(gep, g_j_t[j,hour] >= 0)
            @constraint(gep, variable_cost[j] * d_j_t[j,hour] <= priceProjection[hour])
        end
    end
    status = optimize!(gep)
    println(value(y_j_t[1]))
    println(value(y_j_t[2]))
    println(value(y_j_t[3]))
end

priceProjection = PriceMarkup(priceProjection)
FindBestPortfolio(demand, priceProjection, technologyPool, systemSettings)

function FindBestCombination(demand::Array{Float64,1}, priceProjection::Array{Float64,1}, technologyPool::Array{Technology,1}, systemSettings::SystemSettings)
    Combis = Array{Tuple,1}(undef,0)
    for i in 0:20
        for j in 0:20
            for k in 0:20
                if i + j + k <= 10 && i + j + k >= 5
                    #println((i,j,k))
                    push!(Combis,(i,j,k))
                end
            end
        end
    end
    variable_cost = [technology.economicProperties.VOMCost + technology.economicProperties.fuelCost for technology in technologyPool]
    fixed_cost = [(technology.economicProperties.FOMCost + technology.economicProperties.yearlyInstallment)/technology.designProperties.unitCapacity for technology in technologyPool]
    representative_day = systemSettings.simulationSettings.year2day
    representative_hour = systemSettings.simulationSettings.day2hour
    VoLL = priceCap
    weight_year = systemSettings.milestoneYear
    representativeDayWeightFactors = systemSettings.simulationSettings.representativeData[:Weights][:,2]
    dailyWeight = repeat(representativeDayWeightFactors,4)

    start_hour = 1
    stop_hour = 4 * representative_day * representative_hour
    yearVector = collect(0:1:(20-1))
    lifeDiscountVector = exp.(-systemSettings.interestRate .* yearVector)
    bestNPV = -Inf
    bestCombi = (0,0,0)
    for combi in Combis
        Cost = zeros(3,20)
        Revenue = zeros(3,20)
        for hour in start_hour:stop_hour
            thisWeightDay = dailyWeight[Int(ceil(hour/representative_hour))]
            thisYearStart = (Int(ceil(hour/representative_day/representative_hour))-1) * systemSettings.milestoneYear + 1
            thisYearEnd = Int(ceil(hour/representative_day/representative_hour))*systemSettings.milestoneYear
            for i in 1:3
                Cost[i,thisYearStart:thisYearEnd] .+= repeat([fixed_cost[i]/(sum(representativeDayWeightFactors)*24)*thisWeightDay*combi[i]*100],systemSettings.milestoneYear)
                if priceProjection[hour] >= variable_cost[i]
                    Cost[i,thisYearStart:thisYearEnd] .+= repeat([variable_cost[i] *  thisWeightDay*combi[i]*100],systemSettings.milestoneYear)
                    Revenue[i,thisYearStart:thisYearEnd] .+= repeat([priceProjection[hour] *  thisWeightDay*combi[i]*100],systemSettings.milestoneYear)
                end
            end
        end
        thisNPV = sum((Revenue .- Cost) * lifeDiscountVector)
        #println(thisNPV)
        if thisNPV >= bestNPV
            bestCombi = deepcopy(combi)
            bestNPV = deepcopy(thisNPV )
        end
    end
    println(bestCombi,bestNPV)
    return bestCombi
end

#FindBestCombination(demand, priceProjection, technologyPool, systemSettings)
